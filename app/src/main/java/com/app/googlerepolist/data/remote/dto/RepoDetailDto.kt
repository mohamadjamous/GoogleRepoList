package com.app.googlerepolist.data.remote.dto

import com.app.googlerepolist.domain.model.Repo
import com.app.googlerepolist.domain.model.RepoDetail

data class RepoDetailDto(
    val allow_forking: Boolean,
    val archive_url: String,
    val archived: Boolean,
    val assignees_url: String,
    val blobs_url: String,
    val branches_url: String,
    val clone_url: String,
    val collaborators_url: String,
    val comments_url: String,
    val commits_url: String,
    val compare_url: String,
    val contents_url: String,
    val contributors_url: String,
    val created_at: String,
    val custom_properties: CustomPropertiesX,
    val default_branch: String,
    val deployments_url: String,
    val description: String?,
    val disabled: Boolean,
    val downloads_url: String,
    val events_url: String,
    val fork: Boolean,
    val forks: Int,
    val forks_count: Int,
    val forks_url: String,
    val full_name: String,
    val git_commits_url: String,
    val git_refs_url: String,
    val git_tags_url: String,
    val git_url: String,
    val has_discussions: Boolean,
    val has_downloads: Boolean,
    val has_issues: Boolean,
    val has_pages: Boolean,
    val has_projects: Boolean,
    val has_wiki: Boolean,
    val homepage: String,
    val hooks_url: String,
    val html_url: String,
    val id: Int,
    val is_template: Boolean,
    val issue_comment_url: String,
    val issue_events_url: String,
    val issues_url: String,
    val keys_url: String,
    val labels_url: String,
    val language: String,
    val languages_url: String,
    val license: License?,
    val merges_url: String,
    val milestones_url: String,
    val mirror_url: String?,
    val name: String,
    val network_count: Int,
    val node_id: String,
    val notifications_url: String,
    val open_issues: Int,
    val open_issues_count: Int,
    val organization: Organization,
    val owner: OwnerX,
    val `private`: Boolean,
    val pulls_url: String,
    val pushed_at: String,
    val releases_url: String,
    val size: Int,
    val ssh_url: String,
    val stargazers_count: Int,
    val stargazers_url: String,
    val statuses_url: String,
    val subscribers_count: Int,
    val subscribers_url: String,
    val subscription_url: String,
    val svn_url: String,
    val tags_url: String,
    val teams_url: String,
    val temp_clone_token: String?,
    val topics: List<Any?>,
    val trees_url: String,
    val updated_at: String,
    val url: String,
    val visibility: String,
    val watchers: Int,
    val watchers_count: Int,
    val web_commit_signoff_required: Boolean
)

fun RepoDetailDto.toRepoDetail(): RepoDetail {
    return RepoDetail(
        allow_forking = this.allow_forking,
        archive_url = this.archive_url,
        archived = this.archived,
        assignees_url = this.assignees_url,
        blobs_url = this.blobs_url,
        branches_url = this.branches_url,
        clone_url = this.clone_url,
        collaborators_url = this.collaborators_url,
        comments_url = this.comments_url,
        commits_url = this.commits_url,
        compare_url = this.compare_url,
        contents_url = this.contents_url,
        contributors_url = this.contributors_url,
        created_at = this.created_at,
        custom_properties = this.custom_properties,
        default_branch = this.default_branch,
        deployments_url = this.deployments_url,
        description = this.description,
        disabled = this.disabled,
        downloads_url = this.downloads_url,
        events_url = this.events_url,
        fork = this.fork,
        forks = this.forks,
        forks_count = this.forks_count,
        forks_url = this.forks_url,
        full_name = this.full_name,
        git_commits_url = this.git_commits_url,
        git_refs_url = this.git_refs_url,
        git_tags_url = this.git_tags_url,
        git_url = this.git_url,
        has_discussions = this.has_discussions,
        has_downloads = this.has_downloads,
        has_issues = this.has_issues,
        has_pages = this.has_pages,
        has_projects = this.has_projects,
        has_wiki = this.has_wiki,
        homepage = this.homepage ?: "",
        hooks_url = this.hooks_url,
        html_url = this.html_url,
        id = this.id,
        is_template = this.is_template,
        issue_comment_url = this.issue_comment_url,
        issue_events_url = this.issue_events_url,
        issues_url = this.issues_url,
        keys_url = this.keys_url,
        labels_url = this.labels_url,
        language = this.language ?: "Unknown",
        languages_url = this.languages_url,
        license = this.license,
        merges_url = this.merges_url,
        milestones_url = this.milestones_url,
        mirror_url = this.mirror_url,
        name = this.name,
        network_count = this.network_count,
        node_id = this.node_id,
        notifications_url = this.notifications_url,
        open_issues = this.open_issues,
        open_issues_count = this.open_issues_count,
        organization = this.organization,
        owner = this.owner,
        `private` = this.`private`,
        pulls_url = this.pulls_url,
        pushed_at = this.pushed_at,
        releases_url = this.releases_url,
        size = this.size,
        ssh_url = this.ssh_url,
        stargazers_count = this.stargazers_count,
        stargazers_url = this.stargazers_url,
        statuses_url = this.statuses_url,
        subscribers_count = this.subscribers_count,
        subscribers_url = this.subscribers_url,
        subscription_url = this.subscription_url,
        svn_url = this.svn_url,
        tags_url = this.tags_url,
        teams_url = this.teams_url,
        temp_clone_token = this.temp_clone_token,
        topics = this.topics?.mapNotNull { it?.toString() } ?: emptyList(),
        trees_url = this.trees_url,
        updated_at = this.updated_at,
        url = this.url,
        visibility = this.visibility,
        watchers = this.watchers,
        watchers_count = this.watchers_count,
        web_commit_signoff_required = this.web_commit_signoff_required
    )
}